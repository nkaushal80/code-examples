import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

public class JsonUpdater {

    public static void main(String[] args) throws Exception {
        // Original JSON
        String originalJson = "{\"name\":\"John\",\"age\":25,\"city\":\"New York\",\"contacts\":[{\"type\":\"email\",\"value\":\"john@example.com\"}]}";

        // Updated JSON with differences
        String updatedJson = "{\"name\":\"John\",\"age\":26,\"city\":\"New York\",\"contacts\":[{\"type\":\"phone\",\"value\":\"123-456-7890\"}]}";

        // Parse JSON strings to JsonNode
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode originalNode = objectMapper.readTree(originalJson);
        JsonNode updatedNode = objectMapper.readTree(updatedJson);

        // Compare and update the original JSON tree
        updateJson(originalNode, updatedNode);

        // Print the updated JSON tree
        System.out.println(originalNode);
    }

    private static void updateJson(JsonNode originalNode, JsonNode updatedNode) {
        if (originalNode.isObject() && updatedNode.isObject()) {
            ObjectNode originalObjectNode = (ObjectNode) originalNode;
            ObjectNode updatedObjectNode = (ObjectNode) updatedNode;

            updatedObjectNode.fields().forEachRemaining(entry -> {
                String fieldName = entry.getKey();
                JsonNode updatedFieldValue = entry.getValue();

                if (originalObjectNode.has(fieldName)) {
                    JsonNode originalFieldValue = originalObjectNode.get(fieldName);

                    if (originalFieldValue.isObject() && updatedFieldValue.isObject()) {
                        // Recursive update for nested objects
                        updateJson(originalFieldValue, updatedFieldValue);
                    } else if (originalFieldValue.isArray() && updatedFieldValue.isArray()) {
                        // Recursive update for nested arrays
                        updateJson(originalFieldValue, updatedFieldValue);
                    } else {
                        // Update the field value
                        originalObjectNode.set(fieldName, updatedFieldValue);
                    }
                } else {
                    // Field doesn't exist in the original JSON, add it
                    originalObjectNode.set(fieldName, updatedFieldValue);
                }
            });
        } else if (originalNode.isArray() && updatedNode.isArray()) {
            ArrayNode originalArrayNode = (ArrayNode) originalNode;
            ArrayNode updatedArrayNode = (ArrayNode) updatedNode;

            // Update array elements
            for (int i = 0; i < Math.min(originalArrayNode.size(), updatedArrayNode.size()); i++) {
                JsonNode originalArrayElement = originalArrayNode.get(i);
                JsonNode updatedArrayElement = updatedArrayNode.get(i);

                if (originalArrayElement.isObject() && updatedArrayElement.isObject()) {
                    // Recursive update for nested objects in arrays
                    updateJson(originalArrayElement, updatedArrayElement);
                } else if (originalArrayElement.isArray() && updatedArrayElement.isArray()) {
                    // Recursive update for nested arrays in arrays
                    updateJson(originalArrayElement, updatedArrayElement);
                } else {
                    // Update the array element
                    originalArrayNode.set(i, updatedArrayElement);
                }
            }

            // Add remaining elements if any
            for (int i = originalArrayNode.size(); i < updatedArrayNode.size(); i++) {
                originalArrayNode.add(updatedArrayNode.get(i));
            }
        }
    }
}
